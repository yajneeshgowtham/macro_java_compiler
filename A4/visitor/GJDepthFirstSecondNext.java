//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirstSecondNext<R,A> extends GJDepthFirstTemp<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
    	  Vector<String> vec=new Vector<String>();
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            String t=(String)e.nextElement().accept(this,argu);
            vec.add(t);
            _count++;
         }
         _ret=(R)vec;
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ) {
    	  String s=(String)n.node.accept(this,argu);
    	  System.out.println(s);
          return (R)s;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //


  HashMap<String,Alloc> AllocTable=new HashMap<String,Alloc>();
   
   Vector<String> reg=new Vector<String>();
   
   
   
   
   HashMap<String,Integer> maxArgs=new HashMap<String,Integer>();
   
   
   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
	  AllocTable=(HashMap<String,Alloc>)argu;
	  
	  
	  
	  Iterator hmIterator = AllocTable.entrySet().iterator();
	  
	  while (hmIterator.hasNext()) {
          Map.Entry mapElement = (Map.Entry)hmIterator.next();
          String s=(String)mapElement.getKey();
          maxArgs.put(s,0);  
      }
	  
	  
	  for(int i=0;i<=7;i++) {
		  reg.add("s"+i);
	  }
	  for(int i=0;i<=9;i++) {
		  reg.add("t"+i);
	  }
	  for(int i=0;i<=1;i++) {
		  reg.add("v"+i);
	  }
	 
	  
      R _ret=null;
      n.f0.accept(this, argu);
      String main=n.f0.toString();
      argu=(A)AllocTable.get("MAIN");
      Alloc a=(Alloc)argu;
      Set<Integer> s=new HashSet<Integer>();
      Iterator it = a.register.entrySet().iterator();
      
      while (it.hasNext()) {
          Map.Entry mapElement = (Map.Entry)it.next();
          Integer v=(Integer)mapElement.getValue();
          s.add(v);
          
      }
      
      Integer add=s.size();
      System.out.println(main+"[0]"+"["+(a.location.size()+a.maxArgs+add)+"]"+"["+a.maxArgs+"]");
      
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String end=n.f2.toString();
      System.out.println(end);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      String label=(String)n.f0.accept(this, argu);
      
      Alloc a=AllocTable.get(label);
      argu=(A)a;
      Set<Integer> s=new HashSet<Integer>();
      Iterator it1 = a.register.entrySet().iterator();
      
      while (it1.hasNext()) {
          Map.Entry mapElement = (Map.Entry)it1.next();
          Integer v=(Integer)mapElement.getValue();
          s.add(v);
          
      }
      Integer add=s.size();
      
      n.f1.accept(this, argu);
      if(add<8) {
    	  add=8;
      }
      else {
    	  add=18;
      }
      String it=(String)n.f2.accept(this, argu);
      System.out.println(a.name+"["+it +"]"+"["+(a.location.size()+a.args+add)+"]"+"["+a.maxArgs+"]");
      
      
      Integer t=a.location.size();
      for(int i=0;i<add;i++) {
    	  System.out.println("ASTORE SPILLEDARG "+(i+t)+" "+reg.get(i));
      }
      for(int i=0;i<Math.min(4, a.args);i++) {
    	  System.out.println("MOVE "+reg.get(i)+" a"+i);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      for(int i=0;i<add;i++) {
    	  System.out.println("ALOAD "+reg.get(i)+" SPILLEDARG "+(i+t));
    	  
      }
      
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      System.out.println("NOOP");
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
     System.out.println("ERROR");
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String cjump=n.f0.toString();
      System.out.print(cjump);
      String t=(String)n.f1.accept(this, argu);
      Alloc a=(Alloc)argu;
      if(a.register.get(t)!=null) {
    	Integer i=a.register.get(t);
    	System.out.print(" "+reg.get(i));
      }
      else {
    	  if(a.location.get(t)!=null) {
    		  System.out.println("ALOAD v0 SPILLEDARG "+a.location.get(t));
    		  System.out.print(" v0");
    	  }
      }
      
      String label=(String)n.f2.accept(this, argu);
      System.out.println(" "+label);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String label=(String)n.f1.accept(this, argu);
      System.out.println("JUMP "+label);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      Alloc a =(Alloc)argu;
      n.f0.accept(this, argu);
      String t=(String)n.f1.accept(this, argu);
      String s="";
      if(a.register.get(t)!=null) {
    	  Integer i=a.register.get(t);
    	  s = "HSTORE "+reg.get(i)+" ";
    	  
      }
      else {
    	  if(a.location.get(t)!=null) {
    		  Integer i=a.location.get(t);
    		  System.out.println("ALOAD v0 SPILLEDARG "+i);
    		  s="HSTORE v0 ";
    		  a.register.put(t, i);
    	  }
      }
      String it=(String)n.f2.accept(this, argu);
     
      s=s+it+" ";
      String t1=(String)n.f3.accept(this, argu);
      if(a.register.get(t1)!=null) {
    	  Integer i=a.register.get(t1);
    	  s+=reg.get(i)+" ";
      }
      else {
    	  if(a.location.get(t1)!=null) {
    	     Integer i=a.location.get(t1);
    	     System.out.println("ALOAD v1 SPILLEDARG "+i);
    	     s+="v1 ";
    	     a.register.put(t1, i);
    	  }
      }
      System.out.println(s);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      Alloc a=(Alloc)argu;
      n.f0.accept(this, argu);
      
      String t=(String)n.f1.accept(this, argu);
      String s="";
      if(a.register.get(t)!=null) {
    	  Integer i=a.register.get(t);
    	  
    	  s = "HLOAD "+reg.get(i)+" ";
    	  
      }
      else {
    	  if(a.location.get(t)!=null) {
    		  Integer i=a.location.get(t);
    		  System.out.println("ALOAD v0 SPILLEDARG "+i);
    		  s="HLOAD v0 ";
    		  a.register.put(t, i);
    	  }
      }
      
      
      
      String t1=(String)n.f2.accept(this, argu);
      if(a.register.get(t1)!=null) {
    	  Integer i=a.register.get(t1);
    	  
    	  s+=reg.get(i)+" ";
      }
      else {
    	  if(a.location.get(t1)!=null) {
    	     Integer i=a.location.get(t1);
    	     System.out.println("ALOAD v1 SPILLEDARG "+i);
    	     s+="v1 ";
    	     a.register.put(t1, i);
    	  }
      }
      String it=(String)n.f3.accept(this, argu);
      System.out.println(s+it);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      Alloc a=(Alloc)argu;
      n.f0.accept(this, argu);
      
      String t=(String)n.f1.accept(this, argu);
      
      String exp=(String)n.f2.accept(this, argu);
      
      if(a.register.get(t)!=null) {
    	  Integer i=a.register.get(t);
    	  if(exp.charAt(0)!='C') {
    	  System.out.println("MOVE "+reg.get(i)+" "+exp);
    	  }
    	  else {
    		  System.out.println(exp);
    		  System.out.println("MOVE "+reg.get(i)+" v0");
    	  }
    		  
      }
      else {
    	  if(a.location.get(t)!=null) {
    		  Integer i=a.location.get(t);
    		  if(exp.charAt(0)!='C') {  
    		  System.out.println("MOVE v0 "+exp);
    		  System.out.println("ASTORE  SPILLEDARG "+i+" v0");
    		  }
    		  else {
    			  System.out.println(exp);
    			  System.out.println("ASTORE  SPILLEDARG "+i+" v0");
    			  
    		  }
    	  }
      }
      
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String s=(String)n.f1.accept(this, argu);
      System.out.println("PRINT "+s);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String se=(String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      System.out.println("MOVE v0 "+se);
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      Alloc a=(Alloc)argu;
      n.f0.accept(this, argu);
      String se=(String)n.f1.accept(this, argu);
      _ret=(R)("CALL "+se);
      n.f2.accept(this, argu);
      Integer arg=0;
      R x=n.f3.accept(this, argu);
      Vector<String> temps=new Vector<String>();
      if(x!=null) {
    	  temps=(Vector<String>)x;
      }
      int i=0;
      for(String t: temps) {
    	  
    	  
    	  if(i<=3) {
    		  if(a.register.get(t)!=null)
    		  System.out.println("MOVE a"+i+" "+reg.get(a.register.get(t)));  
    	  }
    	  
    	  else
    		  if(a.register.get(t)!=null) {
    			  Integer it=a.register.get(t);
    			  System.out.println("PASSARG "+(i-3)+" "+reg.get(it));
    		  }
    		  
    		  
    	  i++;
      }
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String se=(String)n.f1.accept(this, argu);
      String ret="HALLOCATE "+se;
      _ret=(R)ret;
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op=(String)n.f0.accept(this, argu);
      Alloc a=(Alloc)argu;
      String t=(String)n.f1.accept(this, argu);
      
      String se=(String)n.f2.accept(this, argu);
      if(a.register.get(t)!=null) {
    	  Integer i=a.register.get(t);
    	  String ret=op+" "+reg.get(i)+" "+se;
    	  _ret=(R)ret;
    	  return _ret;
    	  
      }
      else {
    	  if(a.location.get(t)!=null) {
    		  Integer i=a.location.get(t);
    		  System.out.println("ALOAD v1 SPILLEDARG "+i);
    		  a.register.put(t, 19);
    		  String ret=op+" v1 "+se;
    		  _ret=(R)ret;
    		  return _ret;
    	  }
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s="";
      if(n.f0.which==0) {
    	  s="LE";
      }
      else if(n.f0.which==1) {
    	  s="NE";
      }
      else if(n.f0.which==2) {
    	  s="PLUS";
      }
      else if(n.f0.which==3) {
    	  s="MINUS";
      }
      else if(n.f0.which==4) {
    	  s="TIMES";
      }
      else {
    	  s="DIV";
      }
      _ret=(R)s;
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      Alloc a=(Alloc)argu;
      
      if(n.f0.which==0) {
    	  
    	  String t=(String)n.f0.accept(this,argu);
    	  
    	  if(a.register.get(t)!=null) {
    		  
    		  Integer i=a.register.get(t);
    		  
    		  
    		  _ret=(R)reg.get(i);
    		  return _ret;
    	  }
    	  else {
    		  
    		  if(a.location.get(t)!=null) {
    			  
    			  Integer i=a.location.get(t);
    			  System.out.println("ALOAD v0 SPILLEDARG "+i);
    			  a.register.put(t,18);
    			  _ret=(R)"v0";
    			  return _ret;
    		  }
    	  }
    	  
    	  
      }
      
      _ret=n.f0.accept(this, argu);
      
     
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String s=(String)n.f1.accept(this, argu);
      _ret=(R)("TEMP "+s);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String integer=n.f0.toString();
      _ret=(R)integer;
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String identifier=n.f0.toString();
      _ret=(R)identifier;
      return _ret;
   }

}
