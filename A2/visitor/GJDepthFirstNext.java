//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/*
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirstNext<R,A> extends GJDepthFirst<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
   
   
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         Vector<R> v=new Vector<R>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            v.add(e.nextElement().accept(this,argu));
            _count++;
         }
         return (R) v;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   HashMap<String,SymbolTable> GlobalTable=new HashMap<String,SymbolTable>();
   public R visit(Goal n, A argu) {
      R _ret=null;
      GlobalTable=(HashMap<String,SymbolTable>)argu;
      //System.out.println("Goal");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("Program type checked successfully");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      
	   R _ret=null;//we pass the table to other.
      n.f0.accept(this, argu);
      String c=(String)n.f1.accept(this, argu);
      //System.out.println(c);
      if(GlobalTable.get(c)==null) {
    	  System.out.println("Type error");
    	  
    	  System.exit(0);
      }
      //System.out.println("hi");
      argu=(A)GlobalTable.get(c);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
	  
      R _ret=null;
      n.f0.accept(this, argu);
      //System.out.println("hellowdfrfrfrg");
      //System.out.println("hello");
      String s=(String)n.f1.accept(this,argu);
      argu=(A)GlobalTable.get(s);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
	  
      R _ret=null;
      n.f0.accept(this, argu);
     String s=(String)n.f1.accept(this, argu);
      argu=(A)GlobalTable.get(s);
      
      n.f2.accept(this, argu);
      
      String p=(String)n.f3.accept(this, argu);
      if(GlobalTable.get(p)==null) {
    	 System.out.println("Type error");
    	 System.exit(0);
      }
      if(s.equals(p)) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      while(p!=null) {
    	  //System.out.println(s+","+p);
    	  if(s==p) {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
    	  SymbolTable b=(SymbolTable)(GlobalTable.get(p));
    	  p=b.parentClass;
      }
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
	   //System.out.println("exited var dec");
	  SymbolTable m=(SymbolTable)argu;
      R _ret=null;
      
      
      String t=(String)n.f0.accept(this, argu);
      //System.out.println(t);
      if(!(t.equals("int"))&&(!(t.equals("boolean")))&&!(t.equals("int[]"))) {
    	  if(GlobalTable.get(t)==null) {
    		  System.out.println("Type error");
        	  System.exit(0);
    	  }
    	  
      }
      n.f1.accept(this, argu);
      
      n.f2.accept(this, argu);
      //System.out.println("exited var dec");
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */

   
   
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      
     SymbolTable c=(SymbolTable)argu;
      n.f0.accept(this, argu);
      //System.out.println(mode);
      String t=(String)n.f1.accept(this, argu);
      
      if(!(t.equals("int"))&&(!(t.equals("boolean")))&&!(t.equals("int[]"))) {
    	  if(GlobalTable.get(t)==null) {
    		  System.out.println("Type error");
        	  System.exit(0);
    	  }
    	  
      }
      
      //System.out.println("enetered method");
      String s=(String)n.f2.accept(this, argu);
      //System.out.println("method is "+s);
      
      
     SymbolTable m=(SymbolTable)c.method.get(s);
      //System.out.println("method is "+s);
      argu=(A)m;
      
      n.f3.accept(this, argu);
      
      n.f4.accept(this, argu);
     
      
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      /////////////////////////////////remember to type check//////////////////
      String type=(String)n.f10.accept(this, argu);
     
     if(type.equals(m.outType)==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      //System.out.println("enetered ");
      n.f0.accept(this, argu);
     n.f1.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
	  
      R _ret=null;
      String t=(String)n.f0.accept(this, argu);
      //System.out.println("enetered ");
    if(!(t.equals("int"))&&(!(t.equals("boolean")))&&!(t.equals("int[]"))) {
   	  if(GlobalTable.get(t)==null) {
    		  System.out.println("Type error");
        	  System.exit(0);
    	  }
   	  
      }
      n.f1.accept(this, argu);
     
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   
   public R visit(Type n,A argu) {
	   R _ret=null;
	   _ret=(R)n.f0.accept(this,argu);
	   //System.out.println("type is "+(String)_ret);
	   return _ret;   
   }
   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
       _ret=(R)n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
     String s=(String) n.f0.accept(this, argu);
    s=s+(String)n.f1.accept(this, argu);
      s=s+(String)n.f2.accept(this, argu);
      _ret=(R)s;
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.toString();
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.toString();
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      
	  R _ret=null;
      n.f0.accept(this, argu);
      return (R)n.f0.toString();
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
	   R _ret=null;
	      n.f0.accept(this, argu);
	      return (R)n.f0.toString();
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
	   R _ret=null;
	      n.f0.accept(this, argu);
	      return (R)n.f0.toString();
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String i=(String)n.f0.accept(this, argu);
      SymbolTable c=(SymbolTable)argu;
      String p=(String)c.parentClass;
      
      if(c.dec.get(i)==null&&c.var.get(i)==null) {
    	  boolean found=false;
    	  while(p!=null) {
    		  SymbolTable s=(SymbolTable)GlobalTable.get(p);
    		  if(s.var.get(i)!=null||s.dec.get(i)!=null) {
    			  found=true;
    			  break;
    		  }
    	  }
    	  if(found==false) {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
      }
      n.f1.accept(this, argu);
      
      String type=(String)n.f2.accept(this, argu);
      //System.out.println(type);
      String t=(String)c.var.get(i);
      //System.out.println(t);
      if(type.equals(t)==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this,argu); 
      String t=(String)n.f2.accept(this, argu);
      if(t.equals("int")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String i2 =(String)n.f5.accept(this, argu);
      if(i1.equals(i2)==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t=(String)n.f2.accept(this, argu);
      if(t.equals("boolean")==false) {
    	  System.out.println("Type  error");
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t=(String)n.f2.accept(this, argu);
      if(t.equals("boolean")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t=(String)n.f2.accept(this, argu);
      if(t.equals("boolean")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      
      _ret=(R)n.f0.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String t1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2=(String)n.f2.accept(this, argu);
      if(t1.equals("boolean")==false||t2.equals("boolean")== false) {
    	  System.out.println("Type error");
    	  System.exit(0);
    	  
      }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String t1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2=(String)n.f2.accept(this, argu);
      if(t1.equals("boolean")==false||t2.equals("boolean")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
     String t1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
     String t2=(String) n.f2.accept(this, argu);
      if(t1.equals("int")==false||t2.equals("int")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String  t1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2=(String)n.f2.accept(this, argu);
      if(t1.equals("int")==false||t2.equals("int")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String t1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2=(String)n.f2.accept(this, argu);
      if(t1.equals("int")==false||t2.equals("int")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String t1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2=(String)n.f2.accept(this, argu);
      if(t1.equals("int")==false||t2.equals("int")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String t1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2=(String)n.f2.accept(this, argu);
      if(t1.equals("int")==false||t2.equals("int")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String t1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2=(String)n.f2.accept(this, argu);
      if(t1.equals("int")==false||t2.equals("int")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String t1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String t2=(String)n.f2.accept(this, argu);
      if(t1.equals("int[]")==false||t2.equals("int")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f3.accept(this, argu);
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String t1=(String)n.f0.accept(this, argu);
      if(t1.equals("int[]")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      //System.out.println("helloghgjh");
      Vector<String> v= new Vector<String>();
      String c=(String)n.f0.accept(this, argu);
      if(GlobalTable.get(c)==null) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      
      
      SymbolTable ct=(SymbolTable)GlobalTable.get(c);
      
      n.f1.accept(this, argu);
      String s=(String)n.f2.accept(this, argu);
      boolean found=false;
      while(c!=null) {
    	  ct=(SymbolTable)GlobalTable.get(c);
    	  if(ct.method.get(s)!=null) {
    		  found=true;
    		  break;
    	  }
      }
      if(found==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      
      SymbolTable m=ct.method.get(s);
      if(m.aType.equals("Public")==false) {
    	  if(m.aType.equals("Protected")==false) {
    		  if(m.aType.equals("private")==true) {
    			  if(m.parentClass.equals(ct)==false) {
    				  System.out.println("Type error");
    				  System.exit(0);
    			  }
    		  }
    	  }
      }
      n.f3.accept(this, argu);
      R x=n.f4.accept(this,argu);
      if(x!=null)
      v=(Vector<String>)x;
      
      
      n.f5.accept(this, argu);
      HashMap<String,String> h=new HashMap<String,String>();
      h=(HashMap<String,String>)m.dec;
      int i=0;
      boolean enter =false;
      for(Map.Entry mapElement:h.entrySet()) {
    	  enter=true;
    	  String var=(String)mapElement.getKey();
    	  System.out.println(h.get(var));
    	  if(i<v.size()) {
    		  
    		  if(v.get(i)!=h.get(var)) {
    			  System.out.println("Type error");
    			  System.exit(0);
    		  }
    	  }
    	  if(i==v.size()) {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
    	  i++;
      }
      if(enter==false) {
    	  if(v.size()!=0) {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
      }
      
      //System.out.println("exited");
      return (R)m.outType;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
     String t=(String) n.f1.accept(this, argu);
     if(t.equals("boolean")==false) {
    	 System.out.println("Type error");
    	 System.exit(0);
     }
      String t1=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String t2=(String)n.f4.accept(this, argu);
      if(t1.equals(t2)==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      _ret=(R)t1;
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      Vector<String> v=new Vector<String>();
      R x=n.f0.accept(this, argu);
      
      R s=n.f1.accept(this,argu);
      if(s!=null) {
    	  v=(Vector<String>)s;
    	  
      
      }
      if(x!=null) {
    	  String expr=(String)x;
    	  v.add(0,expr);
      }
      
      _ret=(R)v;
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      Vector<String> v=new Vector<String>();
      n.f0.accept(this, argu);
      
    		R x= n.f1.accept(this, argu);
     if(x!=null) {
    	 String s=(String)x;
    	 v.add(s);
         _ret=(R)v;
     }
     		
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      SymbolTable m=(SymbolTable)argu;
      String t=(String)n.f0.accept(this, argu);
      //System.out.println(t);
      String p=m.parentClass;
      if(t.equals("int")==false&&t.equals("boolean")==false&&t.equals("int[]")==false) {
    	  if(GlobalTable.get(t)==null) {
    		  if(m.dec.get(t)==null&&m.var.get(t)==null) {
    	    		 boolean found=false;
    	    		 System.out.println(p);
    	    		  while(p!=null) {
    	    			  SymbolTable c=GlobalTable.get(m);
    	    			  if(c.var.get(t)!=null) {
    	    				  found=true;
    	    				  t=c.var.get(t);
    	    				  System.out.println(found);
    	    				  break;
    	    			  }
    	    		  }
    	    		  if(found==false) {
    	    			  System.out.println("Type error");
    	    			  System.exit(0);
    	    		  }
    	     }
    		  else if(m.dec.get(t)==null)
    		  {
    			 t=m.var.get(t);
    		  }
    		  else {
    			  t=m.dec.get(t);
    		  }
    	  }
    	  
      }
      _ret=(R)t;
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)"boolean";
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)n.f0.toString();
      //System.out.println("Identifier: "+(String)_ret);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      SymbolTable m=(SymbolTable)argu;
      _ret=(R)m.parentClass;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String t=(String)n.f3.accept(this, argu);
      if(t.equals("int")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f4.accept(this, argu);
      _ret=(R)"int";
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //System.out.println("entered new");
      String i=(String)n.f1.accept(this, argu);
      if(GlobalTable.get(i)==null) {
    	  if(i.equals("int")==false&&i.equals("boolean")==false&&i.equals("int[]")==false) {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
      }
      //System.out.println("exiting new");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      _ret=(R)i;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)n.f1.accept(this, argu);
      String t=(String)_ret;
      if(t.equals("boolean")==false) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}

