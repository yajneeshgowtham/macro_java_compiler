//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirstSecondNext<R,A> extends GJDepthFirst<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   
  
  
  
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   int i=1;
   
   int label=2;
   
   HashMap<String,Integer> Allocate=new HashMap<String,Integer>();
   HashMap<String,Integer> Offset=new HashMap<String,Integer>();
   HashMap<String,IRTable> GlobalTable=new HashMap<String,IRTable>();
   public class FunTable{
	   HashMap<String,String> VarIdx; 
   };
   public FunTable funCons() {
	   FunTable a=new FunTable();
	   a.VarIdx=new HashMap<String,String>();
	   return a;
   }
   
   HashMap<String,FunTable> VarIndices=new HashMap<String,FunTable>();
   
   public R visit(Goal n, A argu) {
      R _ret=null;
      GlobalTable=(HashMap<String,IRTable>)argu;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   
   public R visit(MainClass n, A argu) {
      R _ret=null;
      System.out.println("MAIN");
     IRTable m=Cons();
      argu=(A)m;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      
      n.f14.accept(this, argu);
      
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      GlobalTable=(HashMap<String,IRTable>)argu;
      
      String s=(String)n.f1.accept(this, argu);
      //System.out.println(s);
      IRTable m=GlobalTable.get(s);
      //System.out.println(m.var_dec);
      argu=(A)m;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      GlobalTable=(HashMap<String,IRTable>)argu;
      String s=(String)n.f1.accept(this, argu);
      IRTable m=GlobalTable.get(s);
      argu=(A)m;
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      
      IRTable c=(IRTable)argu;
      
      String cl=c.Name;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String f=(String)n.f2.accept(this, argu);
      IRTable fn=c.Tables.get(f);
      System.out.println(cl+"_"+f+"["+(fn.num_dec+1)+"]");
      argu=(A)fn;
      System.out.println("BEGIN");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      
      String s=(String)n.f10.accept(this, argu);
      System.out.println("RETURN TEMP "+s);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      IRTable m=(IRTable)argu;
	   R _ret=null;
	  //System.out.println("class nale is : "+m.Parent);
      String str=(String)n.f0.accept(this, argu);
      
      String cl=m.Parent;
      
      int  idx=Allocate.get(cl);
     // System.exit(0);
      IRTable c=GlobalTable.get(cl);
      int off=c.var_dec.indexOf(str);
      //System.out.println("offset of "+ str +" is "+c.var_dec.indexOf(str));
      
      FunTable F=VarIndices.get(cl+"_"+m.Name);
      if(F== null) {
    	  F=funCons();
    	  VarIndices.put(cl+"_"+m.Name,F);
      }
      if(F.VarIdx.get(str)==null) {
    	  F.VarIdx.put(str,Integer.toString(i));
    	  
      }
    //  String i1=F.VarIdx.get(i);
//      System.out.println("nu var is: "+F.VarIdx.size());
      String i1=F.VarIdx.get(str);
      i++;
      //System.out.println("Val of i :"+i1);
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
     System.out.println("MOVE TEMP "+i1+" TEMP "+i2);
     if(off!=-1)
     System.out.println("HSTORE TEMP "+idx+" "+4*(off+1)+" TEMP "+i1);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      IRTable m=(IRTable)argu;
      String cl=m.Parent;
      
      String s=(String)n.f0.accept(this, argu);
      int idx=Allocate.get(cl);
      IRTable c=GlobalTable.get(cl);
      int index=c.var_dec.indexOf(s);
      //System.out.println("idx : "+idx);
      n.f1.accept(this, argu);
      String s2=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String s3=(String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      index++;
      index=4*index;
      System.out.println("HLOAD TEMP "+i+" TEMP "+idx+" "+index);
      int i1=i;
      i++;
      System.out.println("MOVE TEMP "+i+" PLUS TEMP "+s2+" 1");
      System.out.println("MOVE TEMP "+i+" TIMES TEMP "+i+" 4");
      System.out.println("MOVE TEMP "+i1+" PLUS TEMP "+i+" TEMP "+i1);
      i++;
      System.out.println("HSTORE TEMP "+i1+" 0 TEMP "+s3);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String i1=(String)n.f2.accept(this, argu);
      System.out.println("CJUMP TEMP "+i1+" L"+label);
      int x=label;
      label++;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("L"+x);
      System.out.println("NOOP");
      //label++;
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
	    
      String i1=(String)n.f2.accept(this, argu);
      System.out.println("CJUMP TEMP "+i1+" L"+label);
	    int x=label;
	    label++;
	    int y=label;
	    label++;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+y);
      
	    
      n.f5.accept(this, argu);
      System.out.println("L"+x);
      System.out.println("NOOP");
      n.f6.accept(this, argu);
      System.out.println("L"+y);
      System.out.println("NOOP");
      //label++;
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      System.out.println("L"+label);
      System.out.println("NOOP");
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int x=label;
      label++;
      String i1=(String)n.f2.accept(this, argu);
      System.out.println("CJUMP TEMP "+i1+" L"+label);
      int y=label;
      label++;
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+x);
      System.out.println("L"+y);
      System.out.println("NOOP");
     // label++;
     // label++;
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s=(String)n.f2.accept(this, argu);
      System.out.println("PRINT TEMP "+s);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String s=(String)n.f0.accept(this, argu);
      _ret=(R)s;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String i1=(String)n.f0.accept(this, argu);
      //System.out.println("MOVE TEMP "+i+" TEMP "+i1);
      //System.out.println("CJUMP TEMP "+i )
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
     // System.out.println("i val is: "+i);
      System.out.println("MOVE TEMP "+i+" TIMES TEMP "+i1+" TEMP "+i2);
      i++;
      //System.out.println("i val is: "+i);
      _ret=(R)Integer.toString(i-1);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" PLUS TEMP "+i1+" TEMP "+i2);
      i++;
      _ret=(R)Integer.toString(i-1);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      
      String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" LE TEMP "+i1+" TEMP "+i2);
      String str=Integer.toString(i);
      _ret=(R)str;
      i++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      
      String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" NE TEMP "+i1+" TEMP "+i2);
      String str=Integer.toString(i);
      _ret=(R)str;
      i++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      
      String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" PLUS TEMP "+i1+" TEMP "+i2);
      String str=Integer.toString(i);
      _ret=(R)str;
      i++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      
      String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" MINUS TEMP "+i1+" TEMP "+i2);
      String str=Integer.toString(i);
      _ret=(R)str;
      i++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      
      String i1=(String)n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" TIMES TEMP "+i1+" TEMP "+i2);
      String str=Integer.toString(i);
      _ret=(R)str;
      i++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      
      String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" DIV TEMP "+i1+" TEMP "+i2);
      i++;
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String off=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //System.out.println("sdfdhfkjhvkdjhvkhvkdfhvkdf");
      IRTable m=(IRTable)argu;
      String cl=m.Parent;
      System.out.println("MOVE TEMP "+i+" PLUS TEMP "+off+" 1");
      System.out.println("MOVE TEMP "+i+" TIMES TEMP "+i+" 4");
      System.out.println("MOVE TEMP "+i+" PLUS TEMP "+i+" TEMP "+i1);
      int idx1=i;
      i++;
      System.out.println("HLOAD TEMP "+i+" TEMP "+idx1+" 0");
      _ret=(R)Integer.toString(i);
      i++;
      return _ret;
   }

   /**sdd
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
     String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      System.out.println("HLOAD TEMP "+i+" TEMP "+i1+" 0");
      i++;
      n.f2.accept(this, argu);
      _ret=(R)Integer.toString(i-1);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      IRTable m=Cons();
      R x=n.f0.accept(this, argu);
      String s=(String)x;
     // System.out.println(n..which);
    //  System.out.println("S is :"+s);
//      if(x==null) {
//    	  System.out.println("x");
//    	  //s=(String)x;
//    	  
//      }(String)
      //System.exit(0);
      String c=null;
     Iterator it=Allocate.entrySet().iterator();
     while(it.hasNext()) {
    	 Map.Entry mp =(Map.Entry)it.next();
    	 if(mp.getValue()==Integer.valueOf(s)) {
    		 c=(String)mp.getKey();
    	 }
     }
          
      n.f1.accept(this, argu);
      String f=(String)n.f2.accept(this, argu);
      //System.out.println("HEllo "+Offset.get(c+"_"+f));
      System.out.println("HLOAD TEMP "+i+" TEMP "+s+" "+0);
      i++;
      //System.out.println(c+"_"+f);
      System.out.println("HLOAD TEMP "+i+" TEMP "+(i-1)+" "+Offset.get(c+"_"+f));
      int idx=i;
      i++;
      n.f3.accept(this, argu);
      Vector<String> vec=new Vector<String>();
      //argu=(A)vec;
      
    		  x=n.f4.accept(this, argu);
    		  if(x!=null)
    		  vec=(Vector<String>)x;
      n.f5.accept(this, argu);
      //System.out.println("HERE "+(String)_ret);
      System.out.print("MOVE TEMP "+i+" CALL TEMP "+idx+" ( TEMP "+s);
      //System.out.println(vec);
      if(vec.size()!=0) {
      for(String str:vec) {
    	  System.out.print(" TEMP "+str+" ");
      }
      }
      System.out.println(" ) ");
      String str=Integer.toString(i);
      _ret=(R)str;
      i++;
      //System.out.println("message send "+ str);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String i1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String i2=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String i4=(String)n.f4.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" TIMES TEMP "+i1+" TEMP "+i2);
      int idx1=i;
      i++;
      System.out.println("MOVE TEMP "+i+" NE TEMP "+i1+" 1");
      i++;
      System.out.println("MOVE TEMP "+i+" TIMES TEMP "+(i-1)+" TEMP "+i4);
      int idx2=i;
      i++;
      System.out.println("MOVE TEMP "+i+" PLUS TEMP "+idx1+" TEMP "+idx2);
      i++;
      _ret=(R)Integer.toString(i-1);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   Vector<String> exprvec=new Vector<String>();
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
     //Vector<String> v=new Vector<String>();
      exprvec.setSize(0);
      String s=(String)n.f0.accept(this, argu);
//      System.out.println("hello "+s);
      
      //System.out.println(" TEMP "+i1);
      n.f1.accept(this, argu);
      
      exprvec.add(s);
      _ret=(R)exprvec; 
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      //Vector<String> v=(Vector<String>)argu;
      n.f0.accept(this, argu);
      String s=(String)n.f1.accept(this, argu);
      exprvec.add(s);
     // System.out.println(s);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      IRTable m=(IRTable)argu;
      //System.out.println("var type : "+m.types.size());
     // System.out.println(m.Name);
      if(n.f0.which==3) {
    	  
    	  _ret=(R)n.f0.accept(this,argu);
    	  String abc=(String)_ret;
    	  //System.out.println(abc);
    	  String t=null;
    	  if(m.types.get(abc)!=null){
    		t=m.types.get(abc);  
    	  }
//    	  String t;
//    	  if(x!=null) {
//    		  t=(String)x;
//    	  }
   	 if(GlobalTable.get(t)!=null) {
   		 System.out.println(t);
    		 _ret=(R)Integer.toString(Allocate.get(t));
    		 return _ret;
   	 }
    	  // System.out.println(abc);
    	  if(m.Name!=null) {
    		  //System.out.println("entered");
    		  String var=(String)_ret;
    		  
    		 // System.out.println(var);
    		  String cl=m.Parent;
    		  int idx=Allocate.get(cl);
    		  IRTable c=GlobalTable.get(cl);
    		  //System.out.println(var);
    		  if(c.var_dec.indexOf(var)!=-1) {
    			  int idx1=c.var_dec.indexOf(var);
    			  idx1+=1;
    			  idx1*=4;
    			 // System.out.println(var);
    			  System.out.println("HLOAD TEMP "+i+" TEMP "+idx+" "+idx1);
    			  _ret=(R)Integer.toString(i);
    			  i++;
    			  return _ret;
    		  }
    		  if(m.dec.indexOf(var)!=-1) {
    			   String retu=Integer.toString(m.dec.indexOf(var)+1);
    			   _ret=(R)retu;
    			   return _ret;
    		   }
    		   //FunTable F=new FunTable(); 
    		  if(VarIndices.get(m.Parent+"_"+m.Name)==null) {
    			  
    		  FunTable F=funCons();  
//    		  if(F.VarIdx.get((String)_ret)!=null){
//                  _ret=(R)F.VarIdx.get((String)_ret);  
//                  //System.out.println("1--> "+(String)_ret);
//                  return _ret;
//    		  }
    		  F.VarIdx.put((String)_ret,Integer.toString(i));
    		  System.out.println(_ret+","+i);
    		  
    		  i++;
    		  VarIndices.put(m.Parent+"_"+m.Name, F);
    		  _ret=(R)Integer.toString(i-1);
    		  return _ret;
    	    }
    		  else {
    			  //System.out.println("entered"+(String)_ret);
    			  		FunTable F=VarIndices.get(m.Parent+"_"+m.Name);
    			  		if(F.VarIdx.get((String)_ret)!=null) {
    			  			_ret=(R)F.VarIdx.get((String)_ret);   
    			  			//System.out.println("2--> "+(String)_ret);
    		                  return _ret;
    			  		}
    			  		F.VarIdx.put((String)_ret,Integer.toString(i));
    		    		  
    		    		  i++;
    		    		  //VarIndices.put(m.Parent+"_"+m.Name, F);
    		    		  _ret=(R)Integer.toString(i-1);
    		    		  return _ret;
    			  		
    		  }
    	  }
    	
    	  //System.out.println("3--> "+(String)_ret);
    	  _ret=(R)abc;
    	  return _ret;
      }
      //System.out.println(m.Name+"_"+m.Parent);
//      if(n.f0.which==4) {
//      _ret=(R)n.f0.accept(this, argu);
//      //System.out.println("primary "+(String)_ret);
//      return _ret;
//      }
      _ret=(R)n.f0.accept(this,argu);
      //System.out.println(n.f0.which);
      //System.out.println("4--> "+(String)_ret);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" "+n.f0.toString());
      //System.out.println(i);
      i++;
      String i1=Integer.toString(i-1);
      return (R)i1;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" 1");
      i++;
      _ret=(R)Integer.toString(i-1);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" 0");
      i++;
      _ret=(R)Integer.toString(i-1);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
//      IRTable m=(IRTable)argu;
//      System.out.println("m.size is "+m.Name)
      return (R)n.f0.toString();
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      IRTable m=(IRTable)argu;
      //System.out.println(c.Parent);
      String s=m.Parent;
      IRTable c=GlobalTable.get(s);
      int main_index=-1;
      if(Allocate.get(s)==null&&c.methods.size()!=0) {
    	  int size=c.methods.size();
    	  System.out.println("MOVE TEMP "+i+" "+4*size);
    	  i++;
    	  System.out.println("MOVE TEMP "+i+" HALLOCATE TEMP "+(i-1));
    	  i++;
    	  System.out.println("MOVE TEMP "+i+" TEMP "+(i-1));
    	  i++;
    	  int index=i-1;
    	  //System.out.println(index);
    	  System.out.println("MOVE TEMP "+i+" "+(4+4*(c.var_dec.size())));
    	  i++;
    	  System.out.println("MOVE TEMP "+i+" HALLOCATE "+"TEMP "+(i-1));
    	  i++;
    	  System.out.println("MOVE TEMP "+i+" TEMP "+(i-1));
    	  main_index=i;
    	  i++;
    	  Vector<String> fn=c.methods;
    	  String cl=c.Name;
    	  int idx=0;
    	  for(String str:fn) {
    		  System.out.println("MOVE TEMP "+i+" "+cl+"_"+str);
    		  System.out.println("HSTORE TEMP "+index+" "+idx+" TEMP "+i);
    		  i++;
    		  Offset.put(cl+"_"+str,idx);
    		  idx+=4;
    	  }
    	  // System.out.println(Offset);
    	  i++;
    	  System.out.println("HSTORE TEMP "+main_index+" 0 TEMP "+index);
    	  
    	  /*Vector<String> var=c.var_dec;
    	  for(String str:var) {
    		  System.out.println(""); 
    	  }*/
    	  System.out.println("MOVE TEMP 0 TEMP "+main_index);
    	  Allocate.put(s,main_index);
    	  //System.out.println(s+"---->"+main_index);
      }
      
      main_index=Allocate.get(s);
      String str=Integer.toString(main_index);
      //System.out.println("print "+str);
      return (R)str;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      IRTable m=(IRTable)argu;
      n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String i1=(String)n.f3.accept(this, argu);
      System.out.println("MOVE TEMP "+i+" PLUS TEMP "+i1+" 1");
      System.out.println("MOVE TEMP "+i+"  TIMES TEMP "+i+" 4");
      i++;
      System.out.println("MOVE TEMP "+i+" HALLOCATE TEMP "+(i-1));
      i++;
      System.out.println("HSTORE TEMP "+(i-1)+" 0 TEMP "+i1);
      //System.out.println("dgwfwhfjwf");
      _ret=(R)Integer.toString(i-1);
      
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      String s=(String)n.f1.accept(this, argu);
      
      IRTable c=GlobalTable.get(s);
      //System.out.println("Hle")
      int main_index=-1;
      if(Allocate.get(s)==null&&c.methods.size()!=0) {
    	  //System.out.println("ENTERED");
    	  int size=c.methods.size();
    	  System.out.println("MOVE TEMP "+i+" "+4*size);
    	  i++;
    	  System.out.println("MOVE TEMP "+i+" HALLOCATE TEMP "+(i-1));
    	  i++;
    	  System.out.println("MOVE TEMP "+i+" TEMP "+(i-1));
    	  i++;
    	  int index=i-1;
    	  //System.out.println(index);
    	  System.out.println("MOVE TEMP "+i+" "+(4+4*(c.var_dec.size())));
    	  i++;
    	  System.out.println("MOVE TEMP "+i+" HALLOCATE "+"TEMP "+(i-1));
    	  i++;
    	  System.out.println("MOVE TEMP "+i+" TEMP "+(i-1));
    	  main_index=i;
    	  i++;
    	  Vector<String> fn=c.methods;
    	  String cl=c.Name;
    	  int idx=0;
    	  for(String str:fn) {
    		  System.out.println("MOVE TEMP "+i+" "+cl+"_"+str);
    		  //System.out.println("here is the error");
    		  FunTable f=funCons();
    		  VarIndices.put(cl+"_"+str,f);
    		  System.out.println("HSTORE TEMP "+index+" "+idx+" TEMP "+i);
    		  Offset.put(cl+"_"+str,idx);
    		  //System.out.println(cl+"_"+str+","+idx);
    		  idx+=4;
    		  i++;
    	  }
    	  // System.out.println(Offset);
    	  i++;
    	  System.out.println("HSTORE TEMP "+main_index+" 0 TEMP "+index);
    	  /*Vector<String> var=c.var_dec;
    	  for(String str:var) {
    		  System.out.println(""); 
    	  }*/
    	  System.out.println("MOVE TEMP 0 TEMP "+main_index);
    	  Allocate.put(s,main_index);
    	  //System.out.println(s+","+main_index);
    	  //System.out.println(s+"---->"+main_index);
      }
      
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String str=Integer.toString(main_index);
      return (R)str;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String i1=(String)n.f1.accept(this, argu);
      System.out.println("MOVE TEMP "+i+ " NE TEMP "+i1+" 1");
      _ret=(R)Integer.toString(i);
      i++;
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s1=(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)s1;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}

